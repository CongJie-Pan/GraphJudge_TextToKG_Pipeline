{
  "app": {
    "title": "🧠 GraphJudge - Intelligent Knowledge Graph Construction System",
    "page_title": "GraphJudge - Intelligent Knowledge Graph Construction",
    "description": "**GraphJudge** is an intelligent knowledge graph construction system based on large language models. Through a three-stage processing pipeline, it extracts entities from Chinese text, generates knowledge triples, and uses AI for quality assessment.",
    "getting_started": "💡 **Getting Started**: Upload a Chinese text file (.txt) or paste text directly to begin analysis.",
    "version": "**Version**: 2.0",
    "models": "**Models**: GPT-5-mini + Perplexity",
    "best_for": "**Best for**: Chinese classical literature texts",
    "developed_by": "**Developed by**: GraphJudge Research Team",
    "version_footer": "**GraphJudge v1.0**",
    "powered_by": "Powered by GPT-5-mini & Perplexity",
    "runtime_label": "**Runtime**",
    "processed_at": "Processed at: {time}",
    "status_ready": "**Status**: Ready",
    "ready_for_next": "Ready for next processing"
  },
  "sidebar": {
    "configuration": "⚙️ Configuration Options",
    "api_settings": "🔌 API Settings",
    "api_timeout": "API Timeout (seconds)",
    "max_retries": "Max Retries",
    "processing_options": "🔄 Processing Options",
    "enable_explanations": "Enable Judgment Explanations",
    "batch_size": "Batch Size",
    "display_options": "🎨 Display Options",
    "language_selection": "🌐 Language / 語言",
    "show_technical_details": "Show Technical Details",
    "auto_scroll": "Auto-scroll to Results",
    "debug_mode": "Debug Mode",
    "debug_options": "🐛 Debug Options",
    "log_level": "Log Level",
    "show_timing": "Show Detailed Timing",
    "api_status": "🔌 API Status Check",
    "test_connection": "Test API Connection",
    "testing_apis": "Testing API connections...",
    "about": "ℹ️ About",
    "clear_results": "🗑️ Clear Results",
    "full_cleanup": "🧹 Full Cleanup",
    "session_stats": "📊 Session Statistics",
    "run_count": "Run Count: {count}",
    "successful_runs": "Successful Runs: {count}",
    "success_rate": "Success Rate: {rate}",
    "cache_hit_rate": "Cache Hit Rate: {rate}",
    "cache_size": "Cache Size: {size} MB",
    "api_config_loaded": "✅ API Configuration: Loaded successfully",
    "api_key_configured": "✅ API Key: Configured",
    "testing_actual_api": "🔗 Testing actual API connections...",
    "api_connection_successful": "✅ {model}: Connection successful",
    "api_key_not_configured": "❌ API Key: Not configured"
  },
  "input": {
    "title": "📝 Input Text",
    "description": "Please upload a Chinese text file (.txt) or enter text directly:",
    "tab_file": "📁 File Upload",
    "tab_text": "✍️ Direct Input",
    "choose_file": "Choose a text file",
    "upload_help": "Upload a .txt file containing Chinese text for analysis",
    "text_placeholder": "Please enter your Chinese text here. Example: 红楼梦是清代作家曹雪芹创作的章回体长篇小说...",
    "text_help": "Supports Chinese classical literature texts, model is optimized for Chinese",
    "file_error": "❌ Failed to read the file. Please ensure it's a valid Chinese text file with proper encoding.",
    "text_stats": "📊 Text Statistics",
    "character_count": "Characters",
    "word_count": "Words",
    "paragraph_count": "Paragraphs",
    "chinese_chars": "Chinese Chars",
    "encoding_used": "Encoding Used",
    "reading_time": "Est. Reading Time",
    "reading_time_unit": "min"
  },
  "file_upload": {
    "success_message": "✅ File uploaded successfully! (Encoding: {encoding})",
    "file_name": "File Name",
    "file_size": "File Size",
    "encoding_used": "Encoding Used",
    "chinese_chars": "Chinese Chars",
    "content_preview": "📋 File Content Preview",
    "preview": "Preview",
    "bytes": "bytes"
  },
  "processing": {
    "title": "🔄 Processing...",
    "progress_title": "🔄 Processing Progress",
    "complete_title": "✅ Processing Complete",
    "entity_phase": "🔍 Entity Extraction Phase",
    "triple_phase": "🔗 Triple Generation Phase",
    "judgment_phase": "⚖️ Graph Judgment Phase",
    "error_occurred": "❌ Processing Error Occurred",
    "processing_input": "Pipeline is processing your input. This may take a few minutes...",
    "cancel_processing": "❌ Cancel Processing",
    "phase_entity_extraction": "🔍 Entity Extraction & Text Denoising",
    "phase_triple_generation": "🔗 Triple Generation",
    "phase_graph_judgment": "⚖️ Graph Judgment",
    "entity_extracting": "Extracting entities from Chinese text",
    "triple_generating": "Generating knowledge graph triples",
    "judgment_validating": "Validating triples with Perplexity AI",
    "entity_completed": "Entity extraction completed",
    "triple_completed": "Triple generation completed",
    "all_completed": "All pipeline phases completed successfully!",
    "processing_failed": "Pipeline failed",
    "processing_complete_time": "🎉 Processing Complete! Total time: {time} seconds",
    "processing_failed_prefix": "❌ Processing Failed: {error}",
    "summary_title": "📊 Processing Summary",
    "detailed_title": "🔄 Detailed Processing Progress",
    "detailed_description": "Real-time processing information similar to terminal output from original source code",
    "phase_description": "📝 **Phase Description**: {description}",
    "timing_info": "⏱️ Started at: {time} | Total elapsed: {elapsed}s",
    "phase_elapsed": "Phase elapsed: {elapsed}s",
    "processing_complete": "✅ Processing Complete"
  },
  "results": {
    "detailed_analysis": "📋 Detailed Results Analysis",
    "historical_comparison": "📈 Historical Comparison Analysis",
    "pipeline_summary": "📈 Pipeline Execution Summary",
    "final_title": "🏆 Final Results",
    "final_kg": "🧠 Final Knowledge Graph",
    "export_options": "📤 Export Options",
    "kg_details": "📋 Knowledge Triple Details",
    "interactive_graph": "🕸️ Interactive Knowledge Graph",
    "rejected_analysis": "Rejected Triples Analysis",
    "analysis_report": "📊 Analysis Report",
    "no_triples_warning": "⚠️ No triples passed AI judgment. You may need to adjust the input text or check the processing logic.",
    "fallback_visualization": "💡 Using fallback visualization (Pyvis data not available)",
    "text_based_display": "📋 Text-based relationship display:",
    "no_relationships": "No relationships to display",
    "creating_graph_fallback": "🔄 Creating graph from triples (graph data not available)",
    "text_based_fallback": "📋 Displaying text-based relationship view instead:",
    "text_based_kg": "📝 Text-Based Knowledge Graph",
    "relationships_title": "**Relationships:**"
  },
  "entity": {
    "title": "🔍 Entity Extraction Results",
    "processing_phases": "🔬 Detailed Processing Phases",
    "phase1_title": "Phase 1: Entity Extraction with GPT-5-mini",
    "phase1_description": "📝 **Advanced Language Understanding**: GPT-5-mini analyzes classical Chinese text using contextual understanding and entity recognition patterns optimized for Chinese literature.",
    "extracted_entities": "📊 Extracted Entities with Smart Categorization",
    "phase2_title": "Phase 2: Text Denoising and Restructuring",
    "phase2_description": "🧹 **GPT-5-mini Text Optimization**: Intelligently restructures and cleans the text based on extracted entities, removing redundant descriptions while preserving essential factual content for accurate knowledge graph generation.",
    "denoised_preview": "📝 Denoised Text Preview",
    "error_analysis": "🔍 Error Analysis & Troubleshooting",
    "error_suggestions": [
      "**API Connectivity**: Check internet connection and API key configuration",
      "**Input Format**: Ensure input text contains valid Chinese characters",
      "**Rate Limiting**: API quota may be exceeded, try again later",
      "**Text Length**: Input may be too long, try breaking into smaller segments",
      "**Model Availability**: GPT-5-mini service may be temporarily unavailable"
    ],
    "technical_details": "Technical Details:"
  },
  "triple": {
    "title": "🔗 Knowledge Triple Generation Results",
    "detailed_phases": "🔬 Detailed Triple Generation Phases",
    "phase1_title": "Phase 1: Semantic Analysis & Relation Extraction",
    "phase1_description": "🧠 **GPT-5-mini Semantic Processing**: Analyzes denoised text to identify meaningful relationships between entities using advanced natural language understanding and Chinese literature context.",
    "phase2_title": "Phase 2: Triple Validation & Formatting",
    "phase2_description": "🔧 **Structure Validation**: Validates generated triples against schema requirements and applies quality filters to ensure proper subject-predicate-object relationships.",
    "generated_triples": "📊 Generated Knowledge Triples",
    "error_analysis": "🔍 Triple Generation Error Analysis",
    "processing_stats": "Processing Statistics",
    "chunks_processed": "Chunks Processed",
    "avg_processing_time": "Avg Processing Time",
    "unique_relations": "Unique Relations"
  },
  "judgment": {
    "title": "⚖️ Graph Judgment Results",
    "filter_display": "Filter Display",
    "sort_by": "Sort By",
    "all": "All",
    "approved_only": "Approved Only",
    "rejected_only": "Rejected Only",
    "status": "Status",
    "confidence": "Confidence",
    "subject": "Subject",
    "relation": "Relation",
    "object": "Object",
    "approved": "Approved",
    "rejected": "Rejected",
    "results_details": "📋 Judgment Results Details ({count} items)",
    "explanations": "💭 Judgment Explanations",
    "analysis": "📊 Judgment Results Analysis",
    "reference_sources": "**Reference Sources:** {sources}",
    "reasoning": "**AI Judgment Explanation:**",
    "evidence_sources": {
      "historical_records": "Historical Records",
      "literary_works": "Literary Works",
      "common_knowledge": "Common Knowledge",
      "domain_expertise": "Domain Expertise"
    }
  },
  "metrics": {
    "total_runs": "Total Runs",
    "avg_processing_time": "Average Processing Time",
    "total_triples": "Total Generated Triples",
    "approval_rate": "Recent Approval Rate",
    "time_seconds": "{time}s",
    "percentage": "{rate}%"
  },
  "buttons": {
    "start_processing": "Start Processing",
    "process_text": "Process Text",
    "export_json": "📄 Export JSON",
    "export_csv": "📊 Export CSV",
    "export_rdf": "🔗 Export RDF",
    "download": "Download",
    "retry": "Retry",
    "back_to_input": "Back to Input",
    "view_details": "View Details",
    "historical_comparison": "Historical Comparison",
    "export_format": "Export Format",
    "export_triples": "📥 Export Triples",
    "generate_report": "📋 Generate Report",
    "download_json": "📄 Download as JSON",
    "show_raw_data": "📊 Show Raw Data",
    "download_html": "📥 Download HTML",
    "show_technical_details": "Show technical details"
  },
  "status": {
    "success": "✅ Success",
    "error": "❌ Error",
    "processing": "🔄 Processing...",
    "complete": "✅ Complete",
    "failed": "❌ Failed",
    "approved": "✅ Approved",
    "rejected": "❌ Rejected"
  },
  "errors": {
    "api_error": "API connection error occurred",
    "processing_error": "Processing error occurred",
    "file_error": "File reading error",
    "validation_error": "Input validation error",
    "timeout_error": "Request timeout error",
    "generic_error": "An unexpected error occurred",
    "pyvis_not_available": "🚫 Pyvis library not available",
    "plotly_required": "📊 Interactive graph visualization requires Plotly library",
    "plotly_install": "💡 Install with: `pip install plotly>=5.0.0`",
    "pyvis_install": "💡 Install with: `pip install pyvis>=0.3.2`",
    "chart_analysis_requires_plotly": "📊 Chart analysis requires Plotly library: `pip install plotly`",
    "pyvis_required": "🌐 Pyvis network visualization requires Pyvis library",
    "failed_pyvis": "Failed to generate Pyvis visualization",
    "no_graph_data": "🤷‍♂️ No graph data available for visualization",
    "app_error": "Application error occurred",
    "app_init_failed": "Failed to initialize application",
    "file_empty": "❌ File is empty. Please upload a file with content.",
    "processing_failed_prefix": "❌ Processing Failed:",
    "pipeline_failed_stage": "Pipeline failed at stage:",
    "plotly_not_installed": "Plotly库未安装，无法显示图形可视化",
    "too_many_nodes": "⚠️ Too many nodes, showing only the first 20 triples in the relationship graph",
    "pipeline_failed_stage_prefix": "Pipeline failed at stage: {stage}",
    "generic_error_prefix": "Error: {error}",
    "api_config_error": "❌ API Configuration Error: {error}",
    "file_too_large": "❌ File too large. Maximum size allowed: {size}MB",
    "file_read_error": "❌ Error reading file with {encoding}: {error}",
    "critical_error": "🚨 Critical Error: {message}",
    "error_message": "❌ Error: {message}",
    "warning_message": "⚠️ Warning: {message}",
    "notice_message": "ℹ️ Notice: {message}",
    "suggested_actions": "**Suggested actions:**"
  },
  "ui": {
    "original_input_text": "**📄 Original Input Text**",
    "denoised_structured_text": "**✨ Denoised & Structured Text**",
    "possible_causes_solutions": "**Possible causes and solutions:**",
    "technical_details": "**Technical Details:**",
    "text_processing": "**📊 Text Processing**",
    "relation_discovery": "**🔍 Relation Discovery**",
    "quality_enhancement": "**✨ Quality Enhancement**",
    "common_issues_solutions": "**Common issues and solutions:**",
    "source_citations": "**Source Citations:**",
    "ai_judgment_explanation": "**AI Judgment Explanation:**",
    "no_detailed_explanation": "*No detailed explanation*",
    "click_rows_details": "Click rows to view detailed information:",
    "no_triples_generated": "⚠️ No triples generated. Please check the entity extraction results.",
    "chart_analysis_plotly": "Chart analysis requires Plotly library support",
    "no_confidence_data": "No confidence distribution data available",
    "no_quality_analysis": "No quality analysis data available",
    "structural_quality": "**Structural Quality**",
    "content_quality": "**Content Quality**",
    "processing_info": "**Processing Info**",
    "interaction_tips": "💡 **Interaction tips:** Drag nodes to rearrange, scroll to zoom, hover for details",
    "view_detailed_results": "🔍 View Detailed Results by Stage",
    "execution_summary": "📊 Execution Summary",
    "detailed_stage_info": "🔍 Detailed Stage Information",
    "no_info_available": "📊 Some results may still be available despite this error.",
    "recovery_options": "🛠️ Recovery Options",
    "manual_action_required": "Manual action required - please make changes and try again.",
    "operation_retryable": "🔄 This operation can be retried - try clicking the button again!"
  },
  "demo": {
    "title": "🧠 Enhanced GraphJudge Pipeline Demo",
    "description": "Detailed processing visualization similar to original source code terminal output"
  }
}